import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

class Item implements Serializable{
	String name;
	Item(String name) {
		this.name = name;
	}
}

class User implements Serializable {
	String nick;
	int exp;
	int money;
	List<Item> li;
	
	User(String nick) {
		this.nick = nick;
		exp = 0;
		money = 500;
		li = new ArrayList<>();
	}

	void goHunt() {
		exp += (int) (Math.random() * 20);
		money += (1 + (int) (Math.random() * 10)) * 100;
		li.add(new Item("물약"));
	}
	// public String toString() ,, User 상태 출력으로 바꿔주시고..

	@Override
	public String toString() {
		return nick + " [" + exp + " xp, ￦" + money + "]";
	}
}

public class Source15_Serializable {
	public static void main(String[] args) {
		User u = new User("v해적왕v");
		System.out.println(u.toString());
		for (int cnt = 1; cnt <= 5; cnt++) {
			u.goHunt();
		}
		System.out.println(u.toString());
		// 이 User를 ObejctOutput으로 출력!
		// NotSerializableException 이 발생하면서 출력 실패가 뜰꺼임.
		try (ObjectOutputStream oos 
				= new ObjectOutputStream(new FileOutputStream(u.nick));) {
			System.out.print("output try..");
			oos.writeObject(u);
			System.out.println("success!");
		} catch (IOException e) {
			System.out.println("failed..  " + e.toString());
		}
		/*
		 * 모든 객체가 Object InOut 되는건 아니다.
		 * 					(TreeSet에 객체 저장할때 같이..)
		 * byte(숫자)화 시킬수 있는 객체들에 한해서만 가능하다. (직렬화 가능한 객체)
		 * Comparable 붙여서 설계했던것 같이 별도로 작업이 필요한건 아니고,
		 *   implements Serializable 를 설정해두면 된다.   
		 *  출력하고자 하는 객체가 Serializable 이여도 그 안에 설정된 객체들이 Serializable 이
		 *  아니면 실패 가 뜬다.  
		 */
		
	}
}
